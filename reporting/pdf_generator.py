from fpdf import FPDF
import datetime
import io

class PDF(FPDF):
    def header(self):
        self.set_font('Helvetica', 'B', 14)
        self.cell(0, 10, 'Control Valve Sizing & Selection Report', 0, 1, 'C')
        self.set_font('Helvetica', 'I', 8)
        self.cell(0, 5, 'Generated by VALV-SIZ Professional Suite', 0, 1, 'C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font('Helvetica', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('Helvetica', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(4)

    def add_data_table(self, data):
        line_height = 6 
        col1_width = 70
        col2_width = 110

        for key, value in data.items():
            # Ensure value is not None before converting to string
            value_str = str(value) if value is not None else "N/A"
            
            start_y = self.get_y()
            self.set_font('Helvetica', 'B', 10)
            self.multi_cell(w=col1_width, h=line_height, txt=f"{key}:", border=0, align='L')
            key_height = self.get_y() - start_y
            self.set_xy(self.l_margin + col1_width, start_y)
            self.set_font('Helvetica', '', 10)
            self.multi_cell(w=col2_width, h=line_height, txt=value_str, border=0, align='L')
            value_height = self.get_y() - start_y
            self.set_y(start_y + max(key_height, value_height))
            self.ln(2)

    def add_plot_page(self, plot_image_bytesio):
        self.add_page()
        self.chapter_title('Dynamic Characteristic Curve')

        if not plot_image_bytesio:
            self.set_font('Helvetica', 'I', 10)
            self.cell(0, 10, "Plot image was not generated or available for the report.", 0, 1, 'L')
            return

        page_width = self.w - 2 * self.l_margin
        img_width = page_width * 0.9
        x = (self.w - img_width) / 2
        y = self.get_y() + 10

        try:
            # Pass the BytesIO object directly to the image method
            self.image(plot_image_bytesio, x=x, y=y, w=img_width)
        except Exception as e:
            self.set_x(x)
            self.set_font('Helvetica', 'B', 10)
            self.multi_cell(0, 10, f"Error embedding plot image: {e}", 0, 'C')

def create_pdf_report(report_data):
    """
    Generates the complete PDF report from a single dictionary of data.
    """
    inputs = report_data.get('inputs', {})
    results = report_data.get('results', {})
    units = inputs.get('units', {})

    # --- 1. Assemble Process Data ---
    process_data = {
        "Fluid Type": inputs.get('fluid_type'),
        "Fluid Name": inputs.get('fluid_name'),
        "Fluid Nature": inputs.get('fluid_nature'),
        f"Inlet Pressure (P1) [{units.get('pressure')}]": f"{inputs.get('p1', 0):.2f}",
        f"Outlet Pressure (P2) [{units.get('pressure')}]": f"{inputs.get('p2', 0):.2f}",
        f"Differential Pressure (DP) [{units.get('pressure')}]": f"{inputs.get('dp', 0):.2f}",
        f"Inlet Temperature (T1) [{units.get('temperature')}]": f"{inputs.get('t1', 0):.2f}",
        f"Flow Rate (Q) [{units.get('flow_liquid' if inputs.get('fluid_type') == 'Liquid' else 'flow_gas')}]": f"{inputs.get('flow_rate', 0):.2f}"
    }
    if inputs.get('fluid_type') == 'Liquid':
        process_data[f"Density / SG [{units.get('density')}]"] = f"{inputs.get('rho', 0):.2f}"
        process_data[f"Vapor Pressure (Pv) [{units.get('pressure')}]"] = f"{inputs.get('pv', 0):.2f}"
        process_data[f"Critical Pressure (Pc) [{units.get('pressure')}]"] = f"{inputs.get('pc', 0):.2f}"
    else:
        process_data["Molecular Weight (MW)"] = f"{inputs.get('mw', 0):.2f}"
        process_data["Specific Heat Ratio (k)"] = f"{inputs.get('k', 0):.2f}"

    # --- 2. Assemble Valve Selection Data ---
    valve_selection_data = {
        "Selected Valve Type": inputs.get('valve_type'),
        "Selected Valve Size": f"{inputs.get('valve_size_nominal')}\"",
        "Selected Style/Trim": inputs.get('valve_style'),
        "Valve Characteristic": inputs.get('valve_char'),
        "Fail-Safe Position": inputs.get('fail_position')
    }

    # --- 3. Assemble Sizing Results Data ---
    sizing_results_data = {
        "Calculated Cv": f"{results.get('cv', 0):.2f}",
        "Rangeability Status": results.get('rangeability_status'),
        "Cavitation Status": results.get('cavitation_status', "N/A"),
        "Trim Recommendation (Cavitation)": results.get('trim_recommendation', "N/A"),
        "Predicted Noise Level": f"{results.get('total_noise_dba', 0):.1f} dBA",
        "Noise Recommendation": results.get('noise_recommendation'),
        "Actuator Recommendation": results.get('actuator_recommendation'),
        "Recommended Body Material": results.get('recommendations', {}).get('Body Material'),
        "Recommended Trim Material": results.get('recommendations', {}).get('Trim Material'),
        "Materials Compliance Check": results.get('compliance_check')
    }

    # --- 4. Get Plot Image ---
    plot_image = results.get('plot_image_bytes')

    # --- Build PDF ---
    pdf = PDF()
    
    pdf.add_page()
    pdf.chapter_title("Process & Valve Selection")
    pdf.add_data_table(process_data)
    pdf.ln(5)
    pdf.add_data_table(valve_selection_data)

    pdf.add_page()
    pdf.chapter_title("Sizing, Noise & Material Results")
    pdf.add_data_table(sizing_results_data)

    if plot_image:
        pdf.add_plot_page(plot_image)

    timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
    filename = f"ControlValveSizingReport_{timestamp}.pdf"
    pdf_output = pdf.output(dest='S').encode('latin-1')
    
    return filename, pdf_output

